package com.codechallenge;

import java.util.List;

public class MapsCollection {
    // VALID MAPS

    // basic example
    // Letters: ABCD
    // Path as characters: @|+-+|A|+-B-C|+-+|+-D--+|x
    public static char[][] map1 = {
            {'+', '-', '+', ' ', '+', '-', 'D', '-', '-', '+'},
            {'|', ' ', '|', ' ', '|', ' ', ' ', ' ', ' ', '|'},
            {'@', ' ', 'A', ' ', '+', '-', '+', ' ', ' ', 'x'},
            {' ', ' ', '|', ' ', ' ', ' ', '|', ' ', ' ', 'E'},
            {' ', ' ', '+', '-', 'B', '-', 'C', ' ', ' ', ' '}
    };

    // straight through intersections
    // Letters: ABCD
    // Path as characters: @|A+---B--+|+--C-+|-||+---D--+|x
    public static char[][] map2 = {
            {'@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', '+', '-', 'C', '-', '-', '+', ' ', ' ', ' '},
            {'A', ' ', '|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' '},
            {'+', '-', '-', '-', 'B', '-', '-', '+', ' ', ' ', ' '},
            {' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' '},
            {' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' '},
            {' ', ' ', '+', '-', '-', '-', 'D', '-', '-', '+', ' '},
    };

    // letters on turns
    // Letters: ABC
    // Path as characters: @--A||+--B|C+x
    public static char[][] map3 = {
            {' ', ' ', 'B', '-', '-', '+', ' ', ' ', ' '},
            {' ', ' ', '|', ' ', ' ', '|', ' ', ' ', ' '},
            {' ', ' ', 'C', ' ', ' ', '|', ' ', ' ', ' '},
            {' ', ' ', '+', 'x', ' ', 'A', '-', '-', '@'},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
    };

    // no duplicate letters
    // Letters: GOONIES
    // Path as characters: @-G-O-+|+-+|O||+-O-N-+|I|+-+|+-I-+|ES|x
    public static char[][] map4 = {
            {' ', ' ', ' ', ' ', '+', '-', 'O', '-', 'N', '-', '+', ' ', ' '},
            {' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' '},
            {' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', '+', '-', 'I', '-', '+'},
            {'@', '-', 'G', '-', 'O', '-', '+', ' ', '|', '|', '|', ' ', '|'},
            {' ', ' ', ' ', ' ', '|', ' ', '|', ' ', '+', '-', '+', ' ', 'E'},
            {' ', ' ', ' ', ' ', '+', '-', '+', ' ', ' ', ' ', ' ', ' ', 'S'},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x'}
    };

    public static List<char[][]> validMaps = List.of(map1, map2, map3, map4);

    // INVALID MAPS

    // no starting point
    public static char[][] map5 = {
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', 'T', '-', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', '+', 'D', '-', 'x', ' ', ' ', ' ', ' '}
    };

    // multiple starting points
    public static char[][] map6 = {
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'+', 'T', '-', '+', '@', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'@', ' ', ' ', '+', 'D', '-', 'x', ' ', ' ', ' ', ' '}
    };

    // missing end
    public static char[][] map7 = {
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'+', 'T', '-', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'@', ' ', ' ', '+', 'D', '-', ' ', ' ', ' ', ' ', ' '}
    };

    // fork in a path
    public static char[][] map8 = {
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {'+', 'A', '-', '+', ' ', 'B', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '|', ' ', '|', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', '+', '-', '+', ' ', ' ', ' ', ' ', ' '},
            {'|', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' '},
            {'@', ' ', ' ', ' ', ' ', '+', '-', 'C', '-', 'x', ' '}
    };

    // multiple starting directions
    public static char[][] map9 = {
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', 'A', '-', '@', '-', 'B', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
            {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
    };


    public static List<char[][]> invalidMaps = List.of(map5, map6, map7, map8, map9);
}
